class Solution {
public:
    string shortestCommonSupersequence(string str1, string str2) {
        int m = str1.size();
        int n = str2.size();
        
        int dp[m+1][n+1];
        for(int i=0;i<=m;i++){                   // LCS dp table to find lcs ,te main idea is to add the lcs characters
                                                  only once which occurs twice (one n string a and other in string b)
          for(int j=0;j<=n;j++){
                
                if(i==0 || j==0) dp[i][j]=0;
                else if(str1[i-1]==str2[j-1]) dp[i][j]=1+dp[i-1][j-1];    
                else dp[i][j]=max(dp[i-1][j],dp[i][j-1]);
            }
        }
        
        int i=m;
        int j=n;
        string str;
        while(i>0 && j>0){
            if(str1[i-1]==str2[j-1]){     // if equal i.e LCS characters ,add only once 
                str += str1[i-1];
                i--;
                j--;
            }
            else{
                if(dp[i-1][j]>dp[i][j-1]){    // if not equal,choose the max and add that character
                    str.push_back(str1[i-1]);
                    i--;
                }
                else {
                    str.push_back(str2[j-1]);
                    j--;
                }
            }
        }
        while(i>0){
            str.push_back(str1[i-1]);
            i--;
        }
        while(j>0){
            str.push_back(str2[j-1]);
            j--;
        }
     reverse(str.begin(),str.end());
        return str;
    }
};
