class Solution
{
    public:
    
    int longest(int x,int y,string s1,string s2)
    {
  
        int dp[x+1][y+1];
        for(int i=0;i<=x;i++){
            for(int j=0;j<=y;j++){
               if(i==0 || j==0) dp[i][j]=0;     // condition for handling base case
               else if (s1[i-1]==s2[j-1]) {
                    dp[i][j]=1+dp[i-1][j-1];   // if character matches in both strings
                                          }
               else dp[i][j]= max(dp[i-1][j],dp[i][j-1]); // else choose the max of skipping one chracter in one string and keeping other string same
            }
        }
        return dp[x][y]; // this returns the length of LCS
        
        /* To print the sequence,add the following program instead of returning length
          i=a.length();    //start rightmost bottommost
         j=b.length();
         string str="";
         while(i>0 && j>0)
         {
         if(a[i-1]==b[j-1]) {  // if characters are same ,add them to resultant string
         str=a[i-1]+str;
         i--;
         j--;
         }
         else {
         if(dp[i-1][j]>dp[i][j-1])  // else take the maximum of previous row and colu
         i--;
         else
         j--;
         }
         }
         return str; // also change the return type to string
         */
}
    
    int lcs(int x, int y, string s1, string s2)
    {
       
        int ans = longest(x,y,s1,s2);    // function call
         return ans;
    }
};
